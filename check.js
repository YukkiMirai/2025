import fetch from "node-fetch";
import { JSDOM } from "jsdom";
import fs from "fs";
import path from "path";

const DISCORD_WEBHOOK = process.env.DISCORD_WEBHOOK || "https://discord.com/api/webhooks/1415280563518050314/oAtN8xs9rqrLp4csUy0_qB4RaaG59VPJb9MH77ckPQVCuwoaoOkNfl6kortJ_64Bn_lQ"; // ‚ö†Ô∏è ƒê·ªïi t·ª´ GITHUB_TOKEN th√†nh DISCORD_WEBHOOK
const STATUS_URL = "https://www.playlostark.com/en-gb/support/server-status";
const DATA_FILE = "webhook_data.json";

// GitHub Gist config (cho GitHub Actions) - CH·ªà D√ôNG SECRETS!
const GITHUB_TOKEN = process.env.GIST_TOKEN; // ‚ö†Ô∏è ƒê·ªïi t·ª´ GITHUB_TOKEN th√†nh GIST_TOKEN
const GIST_ID = process.env.GIST_ID; // ‚ö†Ô∏è PH·∫¢I t·ª´ GitHub Secrets
// ‚ùå KH√îNG BAO GI·ªú hardcode token v√†o code!

// Payload Discord webhook
const payload = {
  "username": "ƒê·ªôi tr∆∞·ªüng ch√≥!",
  "avatar_url": "https://i.imgur.com/AfFp7pu.png",
  "content": "Th√¥ng b√°o! <@&1415372170326179990>",
  "embeds": [
    {
      "title": "Th√¥ng b√°o",
      "description": "Brelshaza is online üéâ",
      "color": 15258703
    }
  ]
};

// Bi·∫øn global ƒë·ªÉ tracking
let isProcessing = false;
let initialStatus = null;

// Kh·ªüi t·∫°o initialStatus t·ª´ file khi script b·∫Øt ƒë·∫ßu
async function initializeFromFile() {
  console.log("DEBUG: ƒêang th·ª≠ kh·ªüi t·∫°o t·ª´ file...");
  const data = await readWebhookData();
  console.log("DEBUG: D·ªØ li·ªáu ƒë·ªçc t·ª´ file:", JSON.stringify(data, null, 2));
  
  if (data.initialStatus) {
    initialStatus = data.initialStatus;
    const statusTime = data.initialStatusTime ? new Date(data.initialStatusTime).toLocaleString('vi-VN') : 'kh√¥ng r√µ';
    console.log("Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu t·ª´ file:", initialStatus, "- Th·ªùi gian:", statusTime);
  } else {
    console.log("DEBUG: Kh√¥ng c√≥ initialStatus trong file");
  }
}

// H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file ho·∫∑c Gist
async function readWebhookData() {
  let result = { initialStatus: null, initialStatusTime: null };
  
  // N·∫øu ƒëang ch·∫°y trong GitHub Actions, d√πng Gist
  if (process.env.GITHUB_ACTIONS && GITHUB_TOKEN && GIST_ID) {
    try {
      console.log("DEBUG: ƒê·ªçc d·ªØ li·ªáu t·ª´ GitHub Gist...");
      const response = await fetch(`https://api.github.com/gists/${GIST_ID}`, {
        headers: {
          'Authorization': `token ${GITHUB_TOKEN}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      });
      
      if (response.ok) {
        const gist = await response.json();
        const fileContent = gist.files['webhook_data.json']?.content;
        if (fileContent) {
          const gistData = JSON.parse(fileContent);
          // Merge v·ªõi default values ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë·ªß fields
          result = { ...result, ...gistData };
          return result;
        }
      }
    } catch (error) {
      console.log("L·ªói khi ƒë·ªçc t·ª´ Gist:", error.message);
    }
  }
  
  // Fallback: ƒë·ªçc t·ª´ file local
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = fs.readFileSync(DATA_FILE, 'utf8');
      const fileData = JSON.parse(data);
      // Merge v·ªõi default values ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë·ªß fields
      result = { ...result, ...fileData };
      return result;
    }
  } catch (error) {
    console.log("L·ªói khi ƒë·ªçc file d·ªØ li·ªáu:", error.message);
  }
  
  return result;
}

// H√†m ghi d·ªØ li·ªáu v√†o file ho·∫∑c Gist
async function writeWebhookData(data) {
  // N·∫øu ƒëang ch·∫°y trong GitHub Actions, ghi v√†o Gist
  if (process.env.GITHUB_ACTIONS && GITHUB_TOKEN && GIST_ID) {
    try {
      console.log("DEBUG: Ghi d·ªØ li·ªáu v√†o GitHub Gist...");
      const response = await fetch(`https://api.github.com/gists/${GIST_ID}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `token ${GITHUB_TOKEN}`,
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          files: {
            'webhook_data.json': {
              content: JSON.stringify(data, null, 2)
            }
          }
        })
      });
      
      if (response.ok) {
        console.log("DEBUG: ƒê√£ ghi th√†nh c√¥ng v√†o Gist");
        return;
      } else {
        console.log("DEBUG: L·ªói ghi Gist:", response.status);
      }
    } catch (error) {
      console.log("L·ªói khi ghi v√†o Gist:", error.message);
    }
  }
  
  // Fallback: ghi v√†o file local
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
    console.log("DEBUG: ƒê√£ ghi v√†o file local");
  } catch (error) {
    console.log("L·ªói khi ghi file d·ªØ li·ªáu:", error.message);
  }
}

// H√†m g·ª≠i webhook
async function sendWebhook(isManual = false) {
  if (isProcessing) return;
  
  isProcessing = true;
  console.log(isManual ? "G·ª≠i webhook th·ªß c√¥ng..." : "G·ª≠i webhook t·ª± ƒë·ªông...");
  
  try {
    const response = await fetch(DISCORD_WEBHOOK, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (response.ok) {
      console.log("Webhook ƒë√£ g·ª≠i th√†nh c√¥ng! Status:", response.status);
    } else {
      throw new Error(`HTTP Error: ${response.status}`);
    }
  } catch (error) {
    console.error("L·ªói khi g·ª≠i webhook:", error.message);
  } finally {
    isProcessing = false;
  }
}

// H√†m l·∫•y tr·∫°ng th√°i server t·ª´ website
async function getServerStatus() {
  try {
    console.log("ƒêang ki·ªÉm tra tr·∫°ng th√°i server...");
    
    const response = await fetch(STATUS_URL, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }

    const html = await response.text();
    const dom = new JSDOM(html);
    const document = dom.window.document;
    
    // T√¨m element ch·ª©a th√¥ng tin Brelshaza
    let serverStatus = null;
    
    // Th·ª≠ nhi·ªÅu c√°ch t√¨m ki·∫øm
    const allElements = document.querySelectorAll('*');
    
    for (const element of allElements) {
      const text = element.textContent;
      const ariaLabel = element.getAttribute('aria-label');
      
      if (text && text.includes('Brelshaza')) {
        if (text.includes('online') || text.includes('Online')) {
          serverStatus = "Brelshaza is online";
        } else if (text.includes('offline') || text.includes('Offline')) {
          serverStatus = "Brelshaza is offline";
        } else if (text.includes('maintenance') || text.includes('Maintenance')) {
          serverStatus = "Brelshaza is maintenance";
        }
      }
      
      if (ariaLabel && ariaLabel.includes('Brelshaza')) {
        serverStatus = ariaLabel;
      }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng c√°ch tr√™n, t√¨m trong to√†n b·ªô HTML
    if (!serverStatus) {
      if (html.includes('Brelshaza is online')) {
        serverStatus = "Brelshaza is online";
      } else if (html.includes('Brelshaza is offline')) {
        serverStatus = "Brelshaza is offline";
      } else if (html.includes('Brelshaza is maintenance')) {
        serverStatus = "Brelshaza is maintenance";
      } else if (html.includes('Brelshaza')) {
        serverStatus = "Brelshaza status unknown";
      }
    }

    return serverStatus;
  } catch (error) {
    console.error("L·ªói khi l·∫•y tr·∫°ng th√°i server:", error.message);
    return null;
  }
}

// H√†m ki·ªÉm tra v√† g·ª≠i webhook
async function checkAndSendWebhook() {
  // Kh·ªüi t·∫°o t·ª´ file n·∫øu ch∆∞a c√≥
  if (initialStatus === null) {
    await initializeFromFile();
  }
  
  // ƒê·ªçc d·ªØ li·ªáu t·ª´ file
  const data = await readWebhookData();
  
  // L·∫•y tr·∫°ng th√°i server hi·ªán t·∫°i
  const currentStatus = await getServerStatus();
  
  if (!currentStatus) {
    console.log("Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i server");
    return;
  }
  
  console.log("Tr·∫°ng th√°i hi·ªán t·∫°i:", currentStatus);
  console.log("Tr·∫°ng th√°i ban ƒë·∫ßu ƒë√£ l∆∞u:", initialStatus);
  
  // N·∫øu ch∆∞a c√≥ initial status th√¨ l∆∞u l·∫°i
  if (initialStatus === null) {
    initialStatus = currentStatus;
    const statusTime = new Date().toISOString();
    console.log("L∆∞u tr·∫°ng th√°i ban ƒë·∫ßu m·ªõi:", initialStatus, "- Th·ªùi gian:", new Date(statusTime).toLocaleString('vi-VN'));
    
    // L∆∞u v√†o file
    await writeWebhookData({
      initialStatus: initialStatus,
      initialStatusTime: statusTime
    });
    
    // N·∫øu ban ƒë·∫ßu ƒë√£ online th√¨ kh√¥ng g·ª≠i webhook
    if (initialStatus === "Brelshaza is online") {
      console.log("Server ƒë√£ online t·ª´ ƒë·∫ßu, kh√¥ng g·ª≠i webhook");
      return;
    }
  }
  
  // ‚úÖ LOGIC M·ªöI ƒê∆†N GI·∫¢N: 
  // Ch·ªâ g·ª≠i webhook khi server chuy·ªÉn t·ª´ (offline/maintenance) sang online
  console.log("=== KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN G·ª¨I WEBHOOK ===");
  console.log("- Server hi·ªán t·∫°i online?", currentStatus === "Brelshaza is online");
  console.log("- Tr·∫°ng th√°i ban ƒë·∫ßu kh√°c online?", initialStatus !== "Brelshaza is online");
  console.log("- Kh√¥ng ƒëang x·ª≠ l√Ω?", !isProcessing);
  
  if (currentStatus === "Brelshaza is online" && 
      initialStatus !== "Brelshaza is online" && 
      !isProcessing) {
    console.log("‚úÖ T·∫§T C·∫¢ ƒêI·ªÄU KI·ªÜN ƒê√É TH·ªéA M√ÉN - G·ª¨I WEBHOOK!");
    console.log("Ph√°t hi·ªán server chuy·ªÉn t·ª´", initialStatus, "sang online!");
    await sendWebhook(false);
  } else {
    console.log("‚ùå KH√îNG G·ª¨I WEBHOOK - L√Ω do:");
    if (currentStatus !== "Brelshaza is online") {
      console.log("  ‚Üí Server ch∆∞a online");
    }
    if (initialStatus === "Brelshaza is online") {
      console.log("  ‚Üí Server ƒë√£ online t·ª´ ƒë·∫ßu (kh√¥ng c√≥ s·ª± chuy·ªÉn ƒë·ªïi)");
    }
    if (isProcessing) {
      console.log("  ‚Üí ƒêang x·ª≠ l√Ω webhook kh√°c");
    }
  }
  
  // Reset initialStatus n·∫øu server hi·ªán t·∫°i kh√¥ng online (offline/maintenance)
  // ƒê·ªÉ chu·∫©n b·ªã cho l·∫ßn online ti·∫øp theo
  if (currentStatus !== "Brelshaza is online" && initialStatus === "Brelshaza is online") {
    const statusTime = new Date().toISOString();
    console.log("Server chuy·ªÉn t·ª´ online sang", currentStatus, "- reset tr·∫°ng th√°i ban ƒë·∫ßu - Th·ªùi gian:", new Date(statusTime).toLocaleString('vi-VN'));
    initialStatus = currentStatus;
    
    // C·∫≠p nh·∫≠t v√†o file
    await writeWebhookData({
      initialStatus: initialStatus,
      initialStatusTime: statusTime
    });
  }
}

// H√†m ch·∫°y ki·ªÉm tra m·ªôt l·∫ßn (cho GitHub Actions)
async function runOnce() {
  console.log("Ki·ªÉm tra tr·∫°ng th√°i server Lost Ark...");
  await checkAndSendWebhook();
  console.log("Ho√†n th√†nh ki·ªÉm tra.");
}

// H√†m ch·∫°y ki·ªÉm tra ƒë·ªãnh k·ª≥ (cho ch·∫°y local)
async function startMonitoring() {
  console.log("B·∫Øt ƒë·∫ßu theo d√µi tr·∫°ng th√°i server Lost Ark...");
  
  // Ki·ªÉm tra ngay l·∫≠p t·ª©c
  await checkAndSendWebhook();
  
  // Thi·∫øt l·∫≠p ki·ªÉm tra ƒë·ªãnh k·ª≥ m·ªói 30 gi√¢y
  setInterval(async () => {
    // Ch·ªâ ki·ªÉm tra n·∫øu kh√¥ng ƒëang x·ª≠ l√Ω
    if (!isProcessing) {
      await checkAndSendWebhook();
    }
  }, 30000); // 30 gi√¢y
}

// H√†m reset ƒë·ªÉ test
function resetWebhookData() {
  writeWebhookData({
    initialStatus: null,
    initialStatusTime: null
  });
  initialStatus = null;
  console.log("ƒê√£ reset d·ªØ li·ªáu webhook");
}

// Export functions ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ b√™n ngo√†i
export { startMonitoring, runOnce, resetWebhookData, sendWebhook };

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  // Ki·ªÉm tra argument ƒë·ªÉ quy·∫øt ƒë·ªãnh ch·∫ø ƒë·ªô ch·∫°y
  const args = process.argv.slice(2);
  
  if (args.includes('--once') || process.env.GITHUB_ACTIONS) {
    // Ch·∫°y m·ªôt l·∫ßn cho GitHub Actions ho·∫∑c khi c√≥ flag --once
    runOnce();
  } else {
    // Ch·∫°y ƒë·ªãnh k·ª≥ cho local development
    startMonitoring();
  }
}
