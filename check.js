import fetch from "node-fetch";
import { JSDOM } from "jsdom";
import fs from "fs";
import path from "path";

const DISCORD_WEBHOOK = "https://discord.com/api/webhooks/1415280563518050314/oAtN8xs9rqrLp4csUy0_qB4RaaG59VPJb9MH77ckPQVCuwoaoOkNfl6kortJ_64Bn_lQ";
const STATUS_URL = "https://www.playlostark.com/en-gb/support/server-status";
const DATA_FILE = "webhook_data.json";

// Payload Discord webhook
const payload = {
  "username": "ƒê·ªôi tr∆∞·ªüng ch√≥!",
  "avatar_url": "https://i.imgur.com/AfFp7pu.png",
  "content": "Th√¥ng b√°o! <@&1141669486697644032>",
  "embeds": [
    {
      "title": "Th√¥ng b√°o",
      "description": "Brelshaza is online üéâ",
      "color": 15258703
    }
  ]
};

// Bi·∫øn global ƒë·ªÉ tracking
let isProcessing = false;
let initialStatus = null;

// H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file
function readWebhookData() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = fs.readFileSync(DATA_FILE, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.log("L·ªói khi ƒë·ªçc file d·ªØ li·ªáu:", error.message);
  }
  return { webhookSent: false, webhookTime: null };
}

// H√†m ghi d·ªØ li·ªáu v√†o file
function writeWebhookData(data) {
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
  } catch (error) {
    console.log("L·ªói khi ghi file d·ªØ li·ªáu:", error.message);
  }
}

// H√†m ki·ªÉm tra webhook c√≥ h·∫øt h·∫°n kh√¥ng (1 ng√†y)
function isWebhookDataExpired() {
  const data = readWebhookData();
  if (!data.webhookTime) return true;
  
  const savedTime = new Date(data.webhookTime);
  const currentTime = new Date();
  const diffHours = (currentTime - savedTime) / (1000 * 60 * 60);
  
  return diffHours >= 24; // 24 gi·ªù = 1 ng√†y
}

// H√†m g·ª≠i webhook
async function sendWebhook(isManual = false) {
  if (isProcessing) return;
  
  isProcessing = true;
  console.log(isManual ? "G·ª≠i webhook th·ªß c√¥ng..." : "G·ª≠i webhook t·ª± ƒë·ªông...");
  
  try {
    const response = await fetch(DISCORD_WEBHOOK, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (response.ok) {
      console.log("Webhook ƒë√£ g·ª≠i th√†nh c√¥ng! Status:", response.status);
      
      // L∆∞u tr·∫°ng th√°i ƒë√£ g·ª≠i v√†o file
      writeWebhookData({
        webhookSent: true,
        webhookTime: new Date().toISOString()
      });
    } else {
      throw new Error(`HTTP Error: ${response.status}`);
    }
  } catch (error) {
    console.error("L·ªói khi g·ª≠i webhook:", error.message);
    
    // N·∫øu l·ªói th√¨ x√≥a flag ƒë·ªÉ c√≥ th·ªÉ th·ª≠ l·∫°i
    writeWebhookData({
      webhookSent: false,
      webhookTime: null
    });
  } finally {
    isProcessing = false;
  }
}

// H√†m l·∫•y tr·∫°ng th√°i server t·ª´ website
async function getServerStatus() {
  try {
    console.log("ƒêang ki·ªÉm tra tr·∫°ng th√°i server...");
    
    const response = await fetch(STATUS_URL, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }

    const html = await response.text();
    const dom = new JSDOM(html);
    const document = dom.window.document;
    
    // T√¨m element ch·ª©a th√¥ng tin Brelshaza
    let serverStatus = null;
    
    // Th·ª≠ nhi·ªÅu c√°ch t√¨m ki·∫øm
    const allElements = document.querySelectorAll('*');
    
    for (const element of allElements) {
      const text = element.textContent;
      const ariaLabel = element.getAttribute('aria-label');
      
      if (text && text.includes('Brelshaza')) {
        if (text.includes('online') || text.includes('Online')) {
          serverStatus = "Brelshaza is online";
        } else if (text.includes('offline') || text.includes('Offline')) {
          serverStatus = "Brelshaza is offline";
        }
      }
      
      if (ariaLabel && ariaLabel.includes('Brelshaza')) {
        serverStatus = ariaLabel;
      }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng c√°ch tr√™n, t√¨m trong to√†n b·ªô HTML
    if (!serverStatus) {
      if (html.includes('Brelshaza is online')) {
        serverStatus = "Brelshaza is online";
      } else if (html.includes('Brelshaza is offline')) {
        serverStatus = "Brelshaza is offline";
      } else if (html.includes('Brelshaza')) {
        serverStatus = "Brelshaza status unknown";
      }
    }

    return serverStatus;
  } catch (error) {
    console.error("L·ªói khi l·∫•y tr·∫°ng th√°i server:", error.message);
    return null;
  }
}

// H√†m ki·ªÉm tra v√† g·ª≠i webhook
async function checkAndSendWebhook() {
  // Ki·ªÉm tra d·ªØ li·ªáu c√≥ h·∫øt h·∫°n kh√¥ng
  if (isWebhookDataExpired()) {
    writeWebhookData({
      webhookSent: false,
      webhookTime: null
    });
  }
  
  // Ki·ªÉm tra xem ƒë√£ g·ª≠i webhook trong ng√†y ch∆∞a
  const data = readWebhookData();
  const hasSentWebhook = data.webhookSent === true;
  
  // L·∫•y tr·∫°ng th√°i server hi·ªán t·∫°i
  const currentStatus = await getServerStatus();
  
  if (!currentStatus) {
    console.log("Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i server");
    return;
  }
  
  console.log("Tr·∫°ng th√°i hi·ªán t·∫°i:", currentStatus);
  
  // N·∫øu ch∆∞a c√≥ initial status th√¨ l∆∞u l·∫°i
  if (initialStatus === null) {
    initialStatus = currentStatus;
    console.log("Tr·∫°ng th√°i ban ƒë·∫ßu:", initialStatus);
    
    // N·∫øu ban ƒë·∫ßu ƒë√£ online th√¨ kh√¥ng g·ª≠i webhook
    if (initialStatus === "Brelshaza is online") {
      console.log("Server ƒë√£ online t·ª´ ƒë·∫ßu, kh√¥ng g·ª≠i webhook");
      return;
    }
  }
  
  // Ch·ªâ g·ª≠i webhook khi:
  // 1. Tr·∫°ng th√°i thay ƒë·ªïi t·ª´ offline sang online
  // 2. Ch∆∞a g·ª≠i webhook trong ng√†y
  // 3. Kh√¥ng ƒëang x·ª≠ l√Ω
  if (currentStatus === "Brelshaza is online" && 
      initialStatus !== "Brelshaza is online" && 
      !hasSentWebhook && 
      !isProcessing) {
    console.log("Ph√°t hi·ªán server chuy·ªÉn t·ª´ offline sang online!");
    await sendWebhook(false);
  }
}

// H√†m ch·∫°y ki·ªÉm tra ƒë·ªãnh k·ª≥
async function startMonitoring() {
  console.log("B·∫Øt ƒë·∫ßu theo d√µi tr·∫°ng th√°i server Lost Ark...");
  
  // Ki·ªÉm tra ngay l·∫≠p t·ª©c
  await checkAndSendWebhook();
  
  // Thi·∫øt l·∫≠p ki·ªÉm tra ƒë·ªãnh k·ª≥ m·ªói 30 gi√¢y
  setInterval(async () => {
    const data = readWebhookData();
    const hasSentWebhook = data.webhookSent === true;
    const isExpired = isWebhookDataExpired();
    
    // Ch·ªâ ki·ªÉm tra n·∫øu ch∆∞a g·ª≠i webhook ho·∫∑c webhook ƒë√£ h·∫øt h·∫°n
    if (!isProcessing && (!hasSentWebhook || isExpired)) {
      await checkAndSendWebhook();
    }
  }, 30000); // 30 gi√¢y
}

// H√†m reset ƒë·ªÉ test
function resetWebhookData() {
  writeWebhookData({
    webhookSent: false,
    webhookTime: null
  });
  initialStatus = null;
  console.log("ƒê√£ reset d·ªØ li·ªáu webhook");
}

// Export functions ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ b√™n ngo√†i
export { startMonitoring, resetWebhookData, sendWebhook };

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  startMonitoring();
}
